
import jsPDF from 'jspdf';

interface PDFData {
  chartImage?: string;
  gradCamImage?: string;
  pattern: string;
  patternConfidence: number;
  sentiment: number;
  ticker: string;
  recommendation: {
    action: string;
    confidence: number;
    reasoning: string;
    timeframe: string;
  };
}

export class PDFGenerator {
  private pdf: jsPDF;
  private pageWidth: number;
  private pageHeight: number;

  constructor() {
    this.pdf = new jsPDF('p', 'mm', 'a4');
    this.pageWidth = this.pdf.internal.pageSize.getWidth();
    this.pageHeight = this.pdf.internal.pageSize.getHeight();
  }

  generateReport(data: PDFData): jsPDF {
    this.addHeader();
    this.addExecutiveSummary(data);
    this.addTechnicalAnalysis(data);
    this.addChartImages(data);
    this.addReasoningSection(data);
    this.addDisclaimer();
    this.addFooter();

    return this.pdf;
  }

  private addHeader(): void {
    this.pdf.setFontSize(24);
    this.pdf.setTextColor(51, 51, 51);
    this.pdf.text('Sentivision Trading Report', 20, 25);
    
    this.pdf.setFontSize(12);
    this.pdf.setTextColor(102, 102, 102);
    this.pdf.text(`Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`, 20, 35);
  }

  private addExecutiveSummary(data: PDFData): void {
    this.pdf.setFontSize(16);
    this.pdf.setTextColor(51, 51, 51);
    this.pdf.text(`Analysis for ${data.ticker}`, 20, 50);
    
    // Summary Box
    this.pdf.setFillColor(248, 249, 250);
    this.pdf.rect(20, 60, this.pageWidth - 40, 40, 'F');
    this.pdf.setFontSize(14);
    this.pdf.setTextColor(51, 51, 51);
    this.pdf.text('Executive Summary', 25, 70);
    
    this.pdf.setFontSize(12);
    this.pdf.text(`Action: ${data.recommendation.action}`, 25, 80);
    this.pdf.text(`Confidence: ${data.recommendation.confidence}%`, 25, 88);
    this.pdf.text(`Timeframe: ${data.recommendation.timeframe}`, 25, 96);
  }

  private addTechnicalAnalysis(data: PDFData): void {
    let yPosition = 120;
    this.pdf.setFontSize(16);
    this.pdf.setTextColor(51, 51, 51);
    this.pdf.text('Technical Analysis', 20, yPosition);
    
    yPosition += 15;
    this.pdf.setFontSize(12);
    this.pdf.text(`Detected Pattern: ${data.pattern}`, 25, yPosition);
    yPosition += 8;
    this.pdf.text(`Pattern Confidence: ${data.patternConfidence}%`, 25, yPosition);
    yPosition += 8;
    this.pdf.text(`Sentiment Score: ${data.sentiment.toFixed(3)}`, 25, yPosition);
  }

  private addChartImages(data: PDFData): void {
    if (!data.chartImage) return;

    let yPosition = 175;
    this.pdf.text('Chart Analysis', 20, yPosition);
    yPosition += 10;
    
    try {
      this.pdf.addImage(data.chartImage, 'JPEG', 20, yPosition, 80, 60);
      
      if (data.gradCamImage) {
        this.pdf.addImage(data.gradCamImage, 'JPEG', 110, yPosition, 80, 60);
        this.pdf.text('Original Chart', 20, yPosition + 65);
        this.pdf.text('AI Focus Areas (Grad-CAM)', 110, yPosition + 65);
      }
    } catch (error) {
      console.log('Could not add images to PDF:', error);
    }
  }

  private addReasoningSection(data: PDFData): void {
    const yPosition = this.pageHeight - 100;
    
    this.pdf.setFontSize(16);
    this.pdf.text('AI Reasoning', 20, yPosition);
    
    this.pdf.setFontSize(12);
    const reasoningLines = this.pdf.splitTextToSize(data.recommendation.reasoning, this.pageWidth - 40);
    this.pdf.text(reasoningLines, 20, yPosition + 15);
  }

  private addDisclaimer(): void {
    const yPosition = this.pageHeight - 50;
    
    this.pdf.setFontSize(14);
    this.pdf.setTextColor(220, 38, 127);
    this.pdf.text('Important Disclaimer', 20, yPosition);
    
    this.pdf.setFontSize(10);
    this.pdf.setTextColor(102, 102, 102);
    const disclaimer = 'This report is generated by AI and is for informational purposes only. It should not be considered as financial advice. Trading involves substantial risk and may result in losses. Please consult with a qualified financial advisor before making investment decisions.';
    const disclaimerLines = this.pdf.splitTextToSize(disclaimer, this.pageWidth - 40);
    this.pdf.text(disclaimerLines, 20, yPosition + 10);
  }

  private addFooter(): void {
    this.pdf.setFontSize(8);
    this.pdf.setTextColor(153, 153, 153);
    this.pdf.text('Generated by Sentivision AI Trading Platform', 20, this.pageHeight - 10);
  }
}
