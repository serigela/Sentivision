
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Download, FileText, Loader2 } from "lucide-react";
import { toast } from "sonner";
import jsPDF from 'jspdf';

interface PDFExportProps {
  chartImage?: string;
  gradCamImage?: string;
  pattern: string;
  patternConfidence: number;
  sentiment: number;
  ticker: string;
  recommendation: {
    action: string;
    confidence: number;
    reasoning: string;
    timeframe: string;
  };
}

const PDFExport = ({ 
  chartImage, 
  gradCamImage, 
  pattern, 
  patternConfidence, 
  sentiment, 
  ticker,
  recommendation 
}: PDFExportProps) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(51, 51, 51);
      pdf.text('Sentivision Trading Report', 20, 25);
      
      pdf.setFontSize(12);
      pdf.setTextColor(102, 102, 102);
      pdf.text(`Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`, 20, 35);
      
      // Ticker and Date
      pdf.setFontSize(16);
      pdf.setTextColor(51, 51, 51);
      pdf.text(`Analysis for ${ticker}`, 20, 50);
      
      // Summary Box
      pdf.setFillColor(248, 249, 250);
      pdf.rect(20, 60, pageWidth - 40, 40, 'F');
      pdf.setFontSize(14);
      pdf.setTextColor(51, 51, 51);
      pdf.text('Executive Summary', 25, 70);
      
      pdf.setFontSize(12);
      pdf.text(`Action: ${recommendation.action}`, 25, 80);
      pdf.text(`Confidence: ${recommendation.confidence}%`, 25, 88);
      pdf.text(`Timeframe: ${recommendation.timeframe}`, 25, 96);
      
      // Technical Analysis Section
      let yPosition = 120;
      pdf.setFontSize(16);
      pdf.setTextColor(51, 51, 51);
      pdf.text('Technical Analysis', 20, yPosition);
      
      yPosition += 15;
      pdf.setFontSize(12);
      pdf.text(`Detected Pattern: ${pattern}`, 25, yPosition);
      yPosition += 8;
      pdf.text(`Pattern Confidence: ${patternConfidence}%`, 25, yPosition);
      yPosition += 8;
      pdf.text(`Sentiment Score: ${sentiment.toFixed(3)}`, 25, yPosition);
      
      // Chart Images (if available)
      if (chartImage) {
        yPosition += 20;
        pdf.text('Chart Analysis', 20, yPosition);
        yPosition += 10;
        
        try {
          // Add chart image
          pdf.addImage(chartImage, 'JPEG', 20, yPosition, 80, 60);
          
          if (gradCamImage) {
            // Add Grad-CAM image next to chart
            pdf.addImage(gradCamImage, 'JPEG', 110, yPosition, 80, 60);
            pdf.text('Original Chart', 20, yPosition + 65);
            pdf.text('AI Focus Areas (Grad-CAM)', 110, yPosition + 65);
          }
          
          yPosition += 75;
        } catch (error) {
          console.log('Could not add images to PDF:', error);
          yPosition += 10;
        }
      }
      
      // Reasoning Section
      if (yPosition > pageHeight - 60) {
        pdf.addPage();
        yPosition = 25;
      }
      
      pdf.setFontSize(16);
      pdf.text('AI Reasoning', 20, yPosition);
      yPosition += 15;
      
      pdf.setFontSize(12);
      const reasoningLines = pdf.splitTextToSize(recommendation.reasoning, pageWidth - 40);
      pdf.text(reasoningLines, 20, yPosition);
      yPosition += reasoningLines.length * 6;
      
      // Risk Disclaimer
      yPosition += 20;
      if (yPosition > pageHeight - 40) {
        pdf.addPage();
        yPosition = 25;
      }
      
      pdf.setFontSize(14);
      pdf.setTextColor(220, 38, 127);
      pdf.text('Important Disclaimer', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(10);
      pdf.setTextColor(102, 102, 102);
      const disclaimer = 'This report is generated by AI and is for informational purposes only. It should not be considered as financial advice. Trading involves substantial risk and may result in losses. Please consult with a qualified financial advisor before making investment decisions.';
      const disclaimerLines = pdf.splitTextToSize(disclaimer, pageWidth - 40);
      pdf.text(disclaimerLines, 20, yPosition);
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(153, 153, 153);
      pdf.text('Generated by Sentivision AI Trading Platform', 20, pageHeight - 10);
      
      // Save the PDF
      pdf.save(`Sentivision_${ticker}_${new Date().toISOString().split('T')[0]}.pdf`);
      
      toast.success("Trading report exported successfully!");
    } catch (error) {
      console.error('PDF generation error:', error);
      toast.error("Failed to generate PDF report");
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-sm">
      <CardHeader>
        <CardTitle className="text-white flex items-center space-x-2">
          <FileText className="h-5 w-5 text-blue-400" />
          <span>Export Analysis Report</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-slate-300 space-y-2">
          <p>Generate a comprehensive PDF report including:</p>
          <ul className="list-disc list-inside space-y-1 text-slate-400">
            <li>Executive summary with recommendations</li>
            <li>Technical analysis results</li>
            <li>Chart visualizations and Grad-CAM overlays</li>
            <li>AI reasoning and confidence scores</li>
            <li>Risk disclaimers and compliance notes</li>
          </ul>
        </div>

        <div className="bg-slate-700/30 p-3 rounded-lg">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-slate-400">Ticker:</span>
              <span className="text-white ml-2">{ticker}</span>
            </div>
            <div>
              <span className="text-slate-400">Pattern:</span>
              <span className="text-cyan-400 ml-2">{pattern}</span>
            </div>
            <div>
              <span className="text-slate-400">Confidence:</span>
              <span className="text-white ml-2">{patternConfidence}%</span>
            </div>
            <div>
              <span className="text-slate-400">Action:</span>
              <span className={`ml-2 ${
                recommendation.action === 'BUY' ? 'text-green-400' : 
                recommendation.action === 'SELL' ? 'text-red-400' : 'text-yellow-400'
              }`}>
                {recommendation.action}
              </span>
            </div>
          </div>
        </div>

        <Button 
          onClick={generatePDF}
          disabled={isGenerating}
          className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
        >
          {isGenerating ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Generating Report...
            </>
          ) : (
            <>
              <Download className="h-4 w-4 mr-2" />
              Export PDF Report
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  );
};

export default PDFExport;
